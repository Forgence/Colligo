name: Build, Test, and Release Colligo

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: [1.22]
        os: [windows-latest, ubuntu-latest, macos-latest]
    env:
      DATETIME: ${{ github.run_id }}  # Set a fallback DATETIME value for the job
    steps:
      - name: Set DATETIME Variable for Test Job
        if: runner.os == 'Windows'
        run: echo "DATETIME=$(Get-Date -Format 'yyyyMMddTHHmmssZ')" >> $Env:GITHUB_ENV
        shell: pwsh
      - name: Set DATETIME Variable for Test Job (Unix/Mac)
        if: runner.os != 'Windows'
        run: echo "DATETIME=$(date -u +'%Y%m%dT%H%M%SZ')" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Run Tests
        working-directory: src
        run: go test ./... -v
        continue-on-error: true

  build:
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        go-version: [1.22]
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64]
    env:
      DATETIME: ${{ github.run_id }}  # Set a fallback DATETIME value for the job
      GOOS: ${{ matrix.os == 'windows-latest' && 'windows' || (matrix.os == 'macos-latest' && 'darwin') || 'linux' }}
      GOARCH: ${{ matrix.arch }}
      EXT: ${{ matrix.os == 'windows-latest' && '.exe' || '' }}
      
    steps:
      - name: Set DATETIME Variable for Build Job
        if: runner.os == 'Windows'
        run: echo "DATETIME=$(Get-Date -Format 'yyyyMMddTHHmmssZ')" >> $Env:GITHUB_ENV
        shell: pwsh
      - name: Set DATETIME Variable for Build Job (Unix/Mac)
        if: runner.os != 'Windows'
        run: echo "DATETIME=$(date -u +'%Y%m%dT%H%M%SZ')" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Print Environment for Debugging
        run: |
          echo "OS: ${{ env.GOOS }}"
          echo "Arch: ${{ env.GOARCH }}"
          echo "Go version: ${{ matrix.go-version }}"
          echo "DATETIME: ${{ env.DATETIME }}"
          echo "Working directory: $(pwd)"
          echo "Files in src/ directory:"
          if [ "${{ env.GOOS }}" == "windows" ]; then
            dir src/
          else
            ls -la src/
          fi
          echo "Environment Variables:"
          printenv
        shell: bash

      - name: Build Colligo
        working-directory: src
        env:
          GOOS: ${{ env.GOOS }}
          GOARCH: ${{ env.GOARCH }}
          EXT: ${{ env.EXT }}
        run: |
          mkdir -p build
          go build -o build/colligo${EXT} cmd/main.go
          if [ $? -ne 0 ]; then
            echo "Build failed"
            exit 1
          fi
          echo "Build succeeded"
        continue-on-error: true

      - name: Check and Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: colligo-${{ env.GOOS }}-${{ env.GOARCH }}-${{ env.DATETIME }}${{ env.EXT }}
          path: src/build/colligo${{ env.EXT }}
        if: success()

  release:
    needs: build
    runs-on: ubuntu-latest
    env:
      DATETIME: ${{ github.run_id }}  # Set a fallback DATETIME value for the job
    steps:
      - name: Set DATETIME Variable for Release Job
        run: echo "DATETIME=$(date -u +'%Y%m%dT%H%M%SZ')" >> $GITHUB_ENV
        shell: bash

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./release/*
          tag_name: release-${{ env.DATETIME }}
          name: Release ${{ env.DATETIME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
