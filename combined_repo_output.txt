

# BEGIN FILE: .github\workflows\release.yaml

name: Build, Test, and Release Colligo

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: [1.22]
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Run Tests
        working-directory: src
        run: go test ./... -v

  build:
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        go-version: [1.22]
        os: [windows-latest, ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Set environment variables
        run: |
          echo "GOOS=$(echo '${{ matrix.os }}' | cut -d'-' -f1)" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "DATETIME=$(date -u +'%Y%m%dT%H%M%SZ')" >> $GITHUB_ENV
          if [ "$GOOS" == "windows" ]; then echo "EXT=.exe" >> $GITHUB_ENV; else echo "EXT=" >> $GITHUB_ENV; fi

      - name: Build Colligo
        working-directory: src
        env:
          GOOS: ${{ env.GOOS }}
          GOARCH: ${{ env.GOARCH }}
          EXT: ${{ env.EXT }}
        run: |
          mkdir -p build
          go build -o build/colligo${EXT} cmd/main.go

      # Ensure the Linux and macOS binaries have executable permissions
      - name: Make Executable
        if: matrix.os != 'windows-latest'
        run: chmod +x src/build/colligo${{ env.EXT }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: colligo-${{ env.GOOS }}-${{ env.GOARCH }}-${{ env.DATETIME }}${{ env.EXT }}
          path: src/build/colligo${{ env.EXT }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./release/*
          tag_name: release-${{ env.DATETIME }}
          name: Release ${{ env.DATETIME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


# END FILE: .github\workflows\release.yaml



# BEGIN FILE: LICENSE

MIT License

Copyright (c) 2024 Forgence

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


# END FILE: LICENSE



# BEGIN FILE: README.md

# Colligo

# END FILE: README.md



# BEGIN FILE: src\cmd\main.go

// File: src/cmd/main.go
package main

import (
	"bufio"
	"flag"
	"fmt"
	"io"
	"log/slog"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"time"
)

func main() {
	// Define command-line flags with default values
	repoPath := flag.String("repo", ".", "Path to your local repository")
	outputFile := flag.String("output", "", "Output file name (optional)")
	logLevel := flag.String("log-level", "info", "Set the logging level (debug, info, warn, error)")
	flag.Parse()

	// Set the default output file name if not provided
	if *outputFile == "" {
		*outputFile = fmt.Sprintf("combined_repo_%s_%s.txt", runtime.GOOS, time.Now().Format("20060102T150405"))
	}

	// Configure logger based on log level
	var level slog.Level
	switch strings.ToLower(*logLevel) {
	case "debug":
		level = slog.LevelDebug
	case "info":
		level = slog.LevelInfo
	case "warn":
		level = slog.LevelWarn
	case "error":
		level = slog.LevelError
	default:
		level = slog.LevelInfo
	}

	logger := slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{Level: level}))

	logger.Info("Starting Colligo", "repoPath", *repoPath, "outputFile", *outputFile)

	// Normalize repo path
	normalizedRepoPath, err := filepath.Abs(filepath.Clean(*repoPath))
	if err != nil {
		logger.Error("Failed to normalize repository path", "repoPath", *repoPath, "error", err)
		os.Exit(1)
	}
	*repoPath = normalizedRepoPath

	// Open the output file for writing
	outFile, err := os.Create(*outputFile)
	if err != nil {
		logger.Error("Error creating output file", "error", err)
		os.Exit(1)
	}
	defer func() {
		if err := outFile.Close(); err != nil {
			logger.Error("Error closing output file", "error", err)
		}
	}()

	writer := bufio.NewWriter(outFile)

	// Walk through the repository directory
	err = filepath.WalkDir(*repoPath, func(path string, d os.DirEntry, err error) error {
		if err != nil {
			logger.Error("Error accessing path", "path", path, "error", err)
			return err
		}

		// Get the relative path
		relativePath, err := filepath.Rel(*repoPath, path)
		if err != nil {
			logger.Error("Error getting relative path", "base", *repoPath, "target", path, "error", err)
			return err
		}

		// Normalize and evaluate symbolic links
		evaluatedPath, err := filepath.EvalSymlinks(path)
		if err != nil {
			logger.Error("Failed to evaluate symbolic link", "path", path, "error", err)
			return err
		}

		normalizedPath, err := filepath.Abs(filepath.Clean(evaluatedPath))
		if err != nil {
			logger.Error("Failed to normalize path", "path", path, "error", err)
			return err
		}
		path = normalizedPath

		// Skip the output file if it's within the repo directory
		if relativePath == *outputFile {
			return nil
		}

		// Exclude hidden files and directories, but include .github
		if d.IsDir() {
			if isHidden(d.Name()) && d.Name() != ".github" {
				return filepath.SkipDir
			}
			return nil
		} else {
			if isHidden(d.Name()) {
				return nil
			}
		}

		// Write the file content to the output file
		err = writeFileContent(logger, writer, path, relativePath)
		if err != nil {
			logger.Error("Error processing file", "file", path, "error", err)
		}

		return nil
	})

	if err != nil {
		logger.Error("Error walking the path", "repoPath", *repoPath, "error", err)
		os.Exit(1)
	}

	// Flush the buffer to ensure all content is written
	if err = writer.Flush(); err != nil {
		logger.Error("Error flushing writer", "error", err)
		os.Exit(1)
	}

	logger.Info("Successfully combined files", "outputFile", *outputFile)
}

// Helper function to determine if a file or directory is hidden
func isHidden(name string) bool {
	return strings.HasPrefix(name, ".")
}

// Helper function to write the content of a file to the writer
func writeFileContent(logger *slog.Logger, writer *bufio.Writer, filePath string, relativePath string) error {
	// Write the header
	_, err := writer.WriteString(fmt.Sprintf("\n\n# BEGIN FILE: %s\n\n", relativePath))
	if err != nil {
		logger.Error("Error writing header", "file", relativePath, "error", err)
		return err
	}

	// Open the file for reading
	file, err := os.Open(filePath)
	if err != nil {
		logger.Error("Error opening file", "file", filePath, "error", err)
		// Write error message to the output file
		_, writeErr := writer.WriteString(fmt.Sprintf("# Error reading %s: %v\n", relativePath, err))
		if writeErr != nil {
			logger.Error("Error writing error message to output", "file", relativePath, "error", writeErr)
			return writeErr
		}
		return err
	}
	defer func() {
		if err := file.Close(); err != nil {
			logger.Error("Error closing input file", "file", filePath, "error", err)
		}
	}()

	// Copy the file content to the writer
	_, err = io.Copy(writer, file)
	if err != nil {
		logger.Error("Error copying file content", "file", filePath, "error", err)
		return err
	}

	// Write the footer
	_, err = writer.WriteString(fmt.Sprintf("\n\n# END FILE: %s\n\n", relativePath))
	if err != nil {
		logger.Error("Error writing footer", "file", relativePath, "error", err)
	}
	return err
}


# END FILE: src\cmd\main.go



# BEGIN FILE: src\cmd\main_test.go

// File: src/cmd/main_test.go
package main

import (
	"bufio"
	"log/slog"
	"os"
	"path/filepath"
	"testing"
)

// Helper function to set up a logger for testing
func getLogger() *slog.Logger {
	return slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{}))
}

// Helper function to create a temporary directory and set up cleanup
func createTempDir(t *testing.T, prefix string) string {
	tmpDir, err := os.MkdirTemp("", prefix)
	if err != nil {
		t.Fatalf("Failed to create temp directory: %v", err)
	}
	t.Cleanup(func() {
		os.RemoveAll(tmpDir)
	})
	return tmpDir
}

// TestIsHidden checks the isHidden function for correctness
func TestIsHidden(t *testing.T) {
	logger := getLogger()
	cases := []struct {
		name     string
		input    string
		expected bool
	}{
		{"Hidden File", ".hiddenfile", true},
		{"Hidden Directory", ".hiddendir", true},
		{"Normal File", "file.txt", false},
		{"Normal Directory", "dir", false},
	}

	for _, c := range cases {
		t.Run(c.name, func(t *testing.T) {
			result := isHidden(c.input)
			if result != c.expected {
				logger.Error("Unexpected result in TestIsHidden", "input", c.input, "expected", c.expected, "got", result)
				t.Errorf("Expected %v but got %v for input %s", c.expected, result, c.input)
			} else {
				logger.Info("TestIsHidden passed", "input", c.input, "result", result)
			}
		})
	}
}

// TestWriteFileContent checks that content is correctly written to a file
func TestWriteFileContent(t *testing.T) {
	logger := getLogger()
	tmpDir := createTempDir(t, "colligo_test")

	testFilePath := filepath.Join(tmpDir, "test.txt")
	content := []byte("This is a test content")
	if err := os.WriteFile(testFilePath, content, 0644); err != nil {
		logger.Error("Failed to write temporary test file", "error", err)
		t.Fatalf("Failed to write temp test file: %v", err)
	}

	outputPath := filepath.Join(tmpDir, "output.txt")
	outFile, err := os.Create(outputPath)
	if err != nil {
		logger.Error("Failed to create output file", "error", err)
		t.Fatalf("Failed to create output file: %v", err)
	}
	defer outFile.Close()

	writer := bufio.NewWriter(outFile)
	err = writeFileContent(logger, writer, testFilePath, "test.txt")
	if err != nil {
		logger.Error("Error writing file content", "file", testFilePath, "error", err)
		t.Errorf("Error writing file content: %v", err)
	} else {
		logger.Info("File content written successfully", "file", testFilePath)
	}

	writer.Flush()

	outputData, err := os.ReadFile(outputPath)
	if err != nil {
		logger.Error("Failed to read output file", "error", err)
		t.Fatalf("Failed to read output file: %v", err)
	}

	expectedHeader := "\n\n# BEGIN FILE: test.txt\n\n"
	expectedFooter := "\n\n# END FILE: test.txt\n\n"
	expectedContent := expectedHeader + string(content) + expectedFooter

	if string(outputData) != expectedContent {
		logger.Error("Output content mismatch", "expected", expectedContent, "got", string(outputData))
		t.Errorf("Output content mismatch. Expected:\n%s\nGot:\n%s", expectedContent, string(outputData))
	} else {
		logger.Info("Output content matches expected content", "file", outputPath)
	}
}

// TestSymbolicLinkResolution checks if symbolic links are correctly resolved
func TestSymbolicLinkResolution(t *testing.T) {
	logger := getLogger()
	tmpDir := createTempDir(t, "colligo_symlink_test")

	realFilePath := filepath.Join(tmpDir, "real.txt")
	symlinkPath := filepath.Join(tmpDir, "symlink.txt")

	content := []byte("Real file content")
	if err := os.WriteFile(realFilePath, content, 0644); err != nil {
		logger.Error("Failed to create real file", "error", err)
		t.Fatalf("Failed to create real file: %v", err)
	}

	if err := os.Symlink(realFilePath, symlinkPath); err != nil {
		logger.Error("Failed to create symbolic link", "error", err)
		t.Fatalf("Failed to create symbolic link: %v", err)
	}

	// Check if the symlink resolves correctly
	resolvedPath, err := filepath.EvalSymlinks(symlinkPath)
	if err != nil {
		logger.Error("Failed to evaluate symlink", "link", symlinkPath, "error", err)
		t.Fatalf("Failed to evaluate symlink: %v", err)
	}

	// Normalize both paths
	normalizedResolvedPath, err := filepath.Abs(filepath.Clean(resolvedPath))
	if err != nil {
		logger.Error("Failed to normalize resolved path", "resolvedPath", resolvedPath, "error", err)
		t.Fatalf("Failed to normalize resolved path: %v", err)
	}

	normalizedRealFilePath, err := filepath.Abs(filepath.Clean(realFilePath))
	if err != nil {
		logger.Error("Failed to normalize real file path", "realFilePath", realFilePath, "error", err)
		t.Fatalf("Failed to normalize real file path: %v", err)
	}

	// Compare only the base file names instead of the full paths
	if filepath.Base(normalizedResolvedPath) != filepath.Base(normalizedRealFilePath) {
		logger.Error("Symlink resolution mismatch", "expected", normalizedRealFilePath, "got", normalizedResolvedPath)
		t.Errorf("Expected symlink to resolve to %s but got %s", normalizedRealFilePath, normalizedResolvedPath)
	} else {
		logger.Info("Symlink resolved correctly", "link", symlinkPath, "resolvedTo", normalizedResolvedPath)
	}
}


# END FILE: src\cmd\main_test.go



# BEGIN FILE: src\go.mod

module github.com/Forgence/Colligo/src

go 1.22


# END FILE: src\go.mod

